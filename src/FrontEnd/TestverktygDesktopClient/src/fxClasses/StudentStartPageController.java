package fxClasses;import static fxClasses.LoginController.currentStudent;import java.io.IOException;import java.net.URL;import java.util.ArrayList;import java.util.List;import java.util.ResourceBundle;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.fxml.Initializable;import javafx.scene.Node;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.Button;import javafx.scene.control.Label;import javafx.scene.control.TableColumn;import javafx.scene.control.TableView;import javafx.scene.control.cell.PropertyValueFactory;import javafx.scene.input.MouseEvent;import javafx.stage.Stage;import propertymodels.Question;import propertymodels.Test;import repositories.TestRepository;public class StudentStartPageController implements Initializable{    @FXML    private Label labelStudentName;    @FXML    private TableView tableCourse;    @FXML    private TableColumn columnCourseName;    @FXML    private TableView tableTest;    @FXML    private TableColumn columnTestName;    @FXML    private Button btnGoToTest;    TestRepository testRepo = new TestRepository();    public static Test currentTest;//fyll den med det test som studenten väljer    @Override    public void initialize(URL url, ResourceBundle rb)    {        btnGoToTest.setVisible(false);        labelStudentName.setText(currentStudent.getName());        populateTableCourse();        tableCourse.setOnMouseClicked((MouseEvent event)                ->                 {                    if (tableCourse.getSelectionModel().getSelectedItem() != null)                    {                        propertymodels.Test test;                        test = (propertymodels.Test) tableCourse.getSelectionModel().getSelectedItem();                        populateTableTests(test);                    }        });        tableTest.setOnMouseClicked((MouseEvent event)                ->                 {                    if (tableTest.getSelectionModel().getSelectedItem() != null)                    {                        propertymodels.Test test;                        test = (propertymodels.Test) tableTest.getSelectionModel().getSelectedItem();                        models.Test tempt = testRepo.getTest(test.getId());                        System.out.println("test id --------" + test.getId());                        System.out.println("size--------" + tempt.getQuestions().size());                        currentTest = new Test(tempt.getId(), tempt.getName(), tempt.getSubject(),                                tempt.getAutoCorrectedTest(), tempt.getTotalTime(), tempt.getTeacher_id());                        List<propertymodels.Question> tempQ = new ArrayList<>();                        for (int i = 0; i < tempt.getQuestions().size(); i++)                        {                            tempQ.add(new Question(tempt.getQuestions().get(i).getId(),                                    tempt.getQuestions().get(i).getqText(),                                    tempt.getQuestions().get(i).getCorrectAnswer(),                                    tempt.getQuestions().get(i).getImageURL(),                                    tempt.getQuestions().get(i).getAnswers(),                                    tempt.getQuestions().get(i).getTest_Id()));                        }                        currentTest.setQuestions(tempQ);                        System.out.println("currentTest startPage-----------" + currentTest.getQuestions().size());                        btnGoToTest.setVisible(true);                    }        });    }    public ObservableList<propertymodels.Test> getAndConvertTests()    {        List<models.Test> temp = testRepo.getTests();        ObservableList<propertymodels.Test> tests = FXCollections.observableArrayList();        for (int i = 0; i < temp.size(); i++)        {            List<propertymodels.Question> tempQuestionList = new ArrayList();            for (int j = 0; j < temp.get(i).getQuestions().size(); j++)            {                tempQuestionList.add(new propertymodels.Question(                        temp.get(i).getQuestions().get(j).getId(),                        temp.get(i).getQuestions().get(j).getqText(),                        temp.get(i).getQuestions().get(j).getCorrectAnswer(),                        temp.get(i).getQuestions().get(j).getImageURL(),                        temp.get(i).getQuestions().get(j).getAnswers(),                        temp.get(i).getQuestions().get(j).getTest_Id()));            }            propertymodels.Test tempProp = new propertymodels.Test(temp.get(i).getId(),                    temp.get(i).getName(),                    temp.get(i).getSubject(),                    temp.get(i).getAutoCorrectedTest(),                    temp.get(i).getTotalTime(),                    temp.get(i).getTeacher_id());            tempProp.setQuestions(tempQuestionList);            tests.add(tempProp);        }        return tests;    }    public void populateTableCourse()    {        ObservableList<propertymodels.Test> tests = FXCollections.observableArrayList();        tests.addAll(getAndConvertTests());        tableCourse.setEditable(false);        //tableCourse.getColumns().add(columnCourseName);        columnCourseName.setCellValueFactory(new PropertyValueFactory<Test, String>("subject"));        ObservableList<propertymodels.Test> tempTests = FXCollections.observableArrayList();        tempTests.setAll(getNoDuplicates(tests));        tableCourse.setItems(tempTests);    }    public void populateTableTests(propertymodels.Test test)    {        ObservableList<propertymodels.Test> testsList = FXCollections.observableArrayList();        testsList = getAndConvertTests();        System.out.println("storlek på testlista från DB" + testsList.size() + "----------------------");        ObservableList<propertymodels.Test> testsFromSelectedCourse = FXCollections.observableArrayList();        for (int i = 0; i < testsList.size(); i++)        {            if (testsList.get(i).getSubject().equals(test.getSubject()))            {                testsFromSelectedCourse.add(testsList.get(i));            }        }        columnTestName.setCellValueFactory(new PropertyValueFactory<Test, String>("name"));        tableTest.setItems(testsFromSelectedCourse);    }    public ObservableList<propertymodels.Test> getNoDuplicates(ObservableList<propertymodels.Test> tests)    {        ObservableList<propertymodels.Test> noDupeList = FXCollections.observableArrayList();        int noDupeCounter = 0;        noDupeList.add(tests.get(0));        for (int i = 0; i < tests.size(); i++)        {            if (tests.get(i).getSubject() != null)            {                System.out.println("noDups-------- id: " + tests.get(i).getId());                if (!tests.get(i).getSubject().equals(noDupeList.get(noDupeCounter).getSubject()))                {                    System.out.println("noDups i if sats-------- id: " + tests.get(i).getId());                    noDupeList.add(tests.get(i));                    noDupeCounter += 1;                }            } else            {                break;            }        }        return noDupeList;    }    @FXML    private void goToTest(ActionEvent event) throws IOException    {        Parent studentTestParent = FXMLLoader.load(getClass().getResource("StudentTest.fxml"));        Scene studentTestScene = new Scene(studentTestParent);        Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();        window.setScene(studentTestScene);        window.show();    }}