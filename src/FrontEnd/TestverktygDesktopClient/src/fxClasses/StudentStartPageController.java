/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package fxClasses;import java.io.IOException;import java.net.URL;import java.util.ArrayList;import java.util.List;import java.util.ResourceBundle;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.fxml.Initializable;import javafx.scene.Node;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.Button;import javafx.scene.control.Label;import javafx.scene.control.TableColumn;import javafx.scene.control.TableView;import javafx.scene.control.cell.PropertyValueFactory;import javafx.scene.input.MouseEvent;import javafx.stage.Stage;import propertymodels.Test;import repositories.TestRepository;public class StudentStartPageController implements Initializable{    @FXML    private Label labelStudentName;    @FXML    private TableView tableCourse;    @FXML    private TableColumn columnCourseName;    @FXML    private TableView tableTest;    @FXML    private TableColumn columnTestName;        @FXML            private Button btnGoToTest;    TestRepository testRepo = new TestRepository();    public static Test currentTest;//fyll den med det test som studenten väljer    @Override    public void initialize(URL url, ResourceBundle rb)    {        btnGoToTest.setVisible(false);        populateTableCourse();        tableCourse.setOnMouseClicked((MouseEvent event) ->        {            propertymodels.Test test;            test = (propertymodels.Test) tableCourse.getSelectionModel().getSelectedItem();            populateTableTests(test);        });                tableTest.setOnMouseClicked((MouseEvent event) ->        {            propertymodels.Test test;            test = (propertymodels.Test) tableCourse.getSelectionModel().getSelectedItem();            currentTest = test;                        btnGoToTest.setVisible(true);                               });    }    public ObservableList<propertymodels.Test> getAndConvertTests()    {        List<models.Test> temp = testRepo.getTests();        ObservableList<propertymodels.Test> tests = FXCollections.observableArrayList();        for (int i = 0; i < temp.size(); i++)        {            propertymodels.Test tempProp = new propertymodels.Test(temp.get(i).getId(),                    temp.get(i).getName(),                    temp.get(i).getSubject(),                    temp.get(i).getAutoCorrectedTest(),                    temp.get(i).getTotalTime());            tests.add(tempProp);        }                return tests;    }    public void populateTableCourse()    {        ObservableList<propertymodels.Test> tests = FXCollections.observableArrayList();        tests.addAll(getAndConvertTests());                tableCourse.setEditable(false);        //tableCourse.getColumns().add(columnCourseName);        columnCourseName.setCellValueFactory(new PropertyValueFactory<Test, String>("subject"));                ObservableList<propertymodels.Test> tempTests = FXCollections.observableArrayList();                tempTests.setAll(getNoDuplicates(tests));        tableCourse.setItems(tempTests);    }    public void populateTableTests(propertymodels.Test test)    {        ObservableList<propertymodels.Test> testsList = FXCollections.observableArrayList();        testsList = getAndConvertTests();        System.out.println("storlek på testlista från DB" + testsList.size()  + "----------------------");        ObservableList<propertymodels.Test> testsFromSelectedCourse = FXCollections.observableArrayList();        for (int i = 0; i < testsList.size(); i++)        {            if (testsList.get(i).getSubject().equals(test.getSubject()))            {                testsFromSelectedCourse.add(testsList.get(i));            }        }        columnTestName.setCellValueFactory(new PropertyValueFactory<Test, String>("name"));        tableTest.setItems(testsFromSelectedCourse);    }    public ObservableList<propertymodels.Test> getNoDuplicates(ObservableList<propertymodels.Test> tests)    {        ObservableList<propertymodels.Test> noDupeList = FXCollections.observableArrayList();        int noDupeCounter = 0;        //        for (int i = 0; i<tests.size(); i++)//        {//            System.out.println(tests.get(i).getSubject() + " = " + tests.get(i).getId());//        }        noDupeList.add(tests.get(0));        for (int i = 0; i < tests.size(); i++)        {            if (!tests.get(i).getSubject().equals(noDupeList.get(noDupeCounter).getSubject()))            {                noDupeList.add(tests.get(i));                noDupeCounter += 1;            }        }              //            for(int j = 0; j < tests.size(); j++)            //{//                //                if (!tests.get(i).getSubject().equals(tests.get(j).getSubject()))//                {//                    noDupeList.add(tests.get(i));//                    System.out.println(tests.get(i).getSubject() + " = " + tests.get(j).getSubject());//                    //                    break;//                }//          }                   return noDupeList;    }    @FXML    private void goToTest(ActionEvent event) throws IOException    {        Parent studentTestParent = FXMLLoader.load(getClass().getResource("StudentTest.fxml"));        Scene studentTestScene = new Scene(studentTestParent);        Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();                window.setScene(studentTestScene);        window.show();    }}